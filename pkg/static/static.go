// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/index.html
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x79\x8f\xdb\xb8\x15\xff\x3f\x40\xbe\xc3\x8b\x92\x20\x1e\xc4\x87\xec\x99\x4c\x1d\xc5\x9a\xa2\x9d\x4c\xd1\x2d\xd2\x4d\x80\xa4\xd8\x0d\x82\x29\x42\x89\x4f\x36\x31\x14\xa9\x8a\x94\x65\x27\x9d\xef\x5e\x90\x92\x7c\xc8\x92\xec\x29\xba\x5b\xec\x0a\x30\x4c\x51\xbf\x77\xf2\x1d\x24\x67\x4f\xde\xbe\xbf\xfe\xf4\xf9\xc3\x0d\x2c\x74\xcc\xaf\x1e\x3f\x9a\x95\xff\x66\x84\x84\x5e\x3d\x7e\x04\x00\x30\x8b\x51\x13\x08\x17\x24\x55\xa8\x7d\x27\xd3\xd1\x60\xea\xc0\x68\xef\xeb\x42\xeb\x64\x80\xff\xca\xd8\xd2\x77\x7e\x1e\xfc\xe3\x4f\x83\x6b\x19\x27\x44\xb3\x80\xa3\x03\xa1\x14\x1a\x85\xf6\x9d\x1f\x6e\x7c\xa4\x73\x74\x2a\x52\xcd\x34\xc7\xab\xb7\x29\xc9\x67\xa3\x62\xbc\xcb\x53\x90\x18\x7d\x67\xc9\x30\x4f\x64\xaa\x77\xd8\xe4\x8c\xea\x85\x4f\x71\xc9\x42\x1c\xd8\x97\x3e\x30\xc1\x34\x23\x7c\xa0\x42\xc2\xd1\x1f\x0f\xdd\x3e\x64\x0a\x53\xfb\x4e\x02\x8e\xfe\x1a\xd5\x46\xae\xd2\xeb\x8d\x2c\xf3\x04\x92\xae\xe1\xfb\xf6\xdd\x3c\x31\x49\xe7\x4c\x78\xe0\xc2\x13\x16\x1b\x05\x88\xd0\x6f\xf6\x21\x09\xa1\x94\x89\x79\x27\x46\x2e\x31\x8d\xb8\xcc\x3d\x58\x30\x4a\x51\xb4\x23\x63\xb2\x2a\x8c\xf1\xe0\xb5\xfb\x7c\xe7\xe3\xfd\x76\xb8\x1d\x3d\x0d\x89\x58\x12\x55\xd7\x9a\x32\x95\x70\xb2\xf6\x20\xe0\x32\xbc\xab\x49\xd0\x32\x0b\x17\x03\x12\x6a\x26\x85\x07\x42\x0a\xac\x01\x16\xc8\xe6\x0b\xed\xc1\xd8\xdd\x53\xa0\xc9\x8e\xda\xe7\x52\xf1\x06\xc2\x44\x2a\x56\x08\x8c\xd8\x0a\xe9\x51\xbb\x38\xce\x51\xd0\xba\x5d\x5b\x2e\x24\x50\x92\x67\xba\xae\xba\x96\x89\x07\x6e\x6d\x92\x63\xa4\x0f\x67\x13\xc9\x84\xc6\x74\x80\x4b\x14\x5a\x35\x3a\x22\x92\x42\x0f\x22\x12\x33\xbe\xf6\x20\x96\x42\xaa\x84\x84\x8d\x20\xc5\xbe\xa1\x07\xe3\xe9\x81\xdd\xf6\x6b\x5e\x3a\x34\x90\x9c\x62\x5a\x57\x19\x57\x7a\xa0\x16\x84\x1a\xaf\x4e\x92\xd5\xe6\x17\x70\x72\xb0\x76\xdf\x06\x4c\x50\x5c\x59\x17\xbb\xc7\x9c\x38\x14\x52\x21\xc7\x50\xd7\xdd\x38\xc8\x31\xb8\x63\x7a\x50\x44\x42\x48\x38\x97\x99\x6e\xf4\x40\x85\x2c\x92\xc8\x32\x6b\xc6\xdd\x99\x9a\x71\x1c\x16\xcb\x6f\x27\x80\xd4\x51\x4c\xd7\xf7\xd2\x17\xb3\x51\x95\xdf\xb3\x51\x59\xc6\x1e\x3f\x9a\x99\x1c\xaf\xf2\x9f\xb2\x25\x30\xea\x3b\x45\xac\x39\x10\x72\xa2\x94\xef\x54\x5e\x73\xae\x66\x23\xca\x96\x15\xba\xcc\x34\x43\x50\x0c\xcd\xf7\x62\xb4\x29\x28\x61\xca\x12\xbd\x53\x51\x72\x26\xa8\xcc\x87\x52\x70\x49\x28\xf8\xd0\x3b\x03\xff\xaa\xbe\x1a\x1c\x35\xdc\x21\xe7\x6b\xf0\xe1\x8b\xf3\x14\x2f\xc7\xaf\x2f\x02\xa7\x0f\xce\xd3\xf3\x30\xb8\x28\x87\x51\x84\xe3\xf1\x6b\x3b\x74\xdd\xe9\x24\x9c\x16\xb3\xaf\xa6\x93\xf3\xb1\x1d\xbe\x1e\x8f\x31\xb8\xb0\xc3\x8b\xcb\xc8\x8d\xdc\x02\xe0\x9e\x4f\xf0\xd2\x0e\xe9\x24\x7a\x75\x1e\x16\xb3\x24\xc0\x00\x2b\x66\xee\xb4\xc0\xe2\x65\x80\x51\x64\x87\x84\x5c\xe2\xa4\x14\x11\x45\xa4\x94\x36\x75\xcd\x53\x02\xa2\x28\x3c\x2f\x67\xa7\xd5\x6c\x14\xd1\x69\x30\x2e\xf9\xba\x15\xdf\xe9\x56\xc4\x5f\xec\xb3\x01\xb8\xae\x73\x7b\x90\xab\x1a\x38\x13\xf8\x93\xa9\x24\xca\x78\x64\xd2\x87\x57\x7d\x18\xbb\x7d\x98\xb8\x7d\xb8\x70\xfb\x30\x75\xfb\x30\xbe\x74\xfb\x70\x6e\x66\x2e\x2f\xdc\x26\x26\xe5\x72\xf9\x40\x65\x98\xc5\x28\xf4\x70\x8e\xfa\x86\xa3\x19\xfe\x79\xfd\x03\xed\xbd\x28\x10\x2f\xce\x9a\x34\x28\xaa\x4f\x07\x71\x81\x68\x24\x0e\xf5\x0a\xfc\x52\xbe\xa1\xbb\x36\x0d\x6b\xa5\x7b\xce\x84\x3a\x75\x7c\xa8\x57\xc3\x12\x69\x6b\x27\xf8\x55\xcc\x30\x21\x30\xb5\x5e\x68\x27\x29\x0a\x75\x8d\xe6\xaf\x76\xb2\x41\xaf\x24\x95\x5a\x86\x92\x83\x0f\x5c\x86\xc4\xd4\xd1\x61\x35\x37\x8c\x89\x0e\x17\xbd\xd1\x3f\x4d\x07\x57\xa3\x33\xf8\x23\x38\xb9\x52\x0e\x78\xe6\xdf\x69\xe0\xa6\x64\x78\x87\x46\xb6\xc0\x1c\x7e\xc2\xe0\xa3\x7d\xef\x7d\x7d\xf6\xbd\xe2\x79\xef\x8d\x46\xcf\xbe\x6f\x44\x2d\xa4\xd2\xf7\xa3\x5c\xed\x4c\x25\x44\x2f\x4c\x7b\xbf\xff\xda\xe8\x47\xc9\x65\x0a\x7e\x43\x39\xd7\x60\xab\xe0\xbb\x2a\x4e\xc0\x87\x71\x0d\xb4\x24\x29\x24\x29\x2e\x99\xcc\x4c\x10\x88\x8c\xf3\x37\xa6\x00\xec\x62\x36\x8b\x4b\x28\xbd\x31\x5d\xe0\x1d\x53\x1a\x05\xa6\xbd\x17\xb6\x32\xc6\x72\x89\x2f\xfa\x10\x65\xc2\xf6\xca\x1e\x9e\xd5\x53\xd7\x3c\x38\x34\x72\x50\xe8\xb7\x18\x91\x8c\xeb\x5e\xdd\x96\xfb\x7e\x13\x59\x42\x94\x62\x4b\xf4\x20\x22\x5c\x61\x8d\xe2\xec\x40\xd7\xc2\xdd\x43\x29\x62\x54\x8a\xcc\xd1\x14\x13\x2b\xb5\xa9\xa2\x54\x5e\x8a\xd5\xdc\x18\xff\xb7\x8f\xef\x7f\x1c\x26\x66\xdf\x56\x90\x0c\x29\xd1\xa4\xae\x25\xd8\x66\x95\x42\x2f\x94\x42\x59\x52\x90\x91\xe5\xd0\x68\x35\x94\x91\xa8\x74\x2a\xef\xf0\xa3\xa9\xb4\xe0\x17\x65\xec\x4b\xac\xe6\xc3\xb0\x9e\x93\xbb\x44\x7c\x67\xe1\xb6\xc9\x6e\xe9\xf2\x63\x74\xd7\x24\x01\x1f\x9c\x54\x66\x82\xd6\xe3\x72\x17\x1b\xe0\x9c\x89\x0f\x44\x2f\x0e\xd6\x63\x17\x65\x96\xf8\x93\xec\x19\xc9\xea\x8b\x7b\xdb\x87\x62\x34\xbe\xed\x22\x32\x6a\x6c\x88\x26\x1b\xa2\xf3\x4e\xa2\xc2\x51\x8d\xca\xdc\xd7\x56\xbf\x9e\xf0\x45\xb2\x4b\x51\xee\x58\x8c\xce\x47\x97\x9f\x45\x25\xc0\x44\xa7\x52\x59\x8a\xe0\xfb\xe0\xb6\xae\x65\x8a\x3a\x4b\xeb\xdb\xb9\x06\xe5\x2a\xde\x9b\xdc\x7a\x52\x24\x57\x2b\x63\x03\x2e\x83\x37\x45\x42\xd7\x1f\x35\xd1\x08\x4f\x7c\xbf\x0a\xe9\xf7\x1f\x6e\x7e\x6c\xa5\x36\xcf\xa6\x5c\xa4\x68\xda\x68\x4f\xa7\x19\xb6\x79\xba\x41\x5b\xd8\x66\x8f\x42\x41\x7b\x36\x1b\x94\x4e\x99\x98\xb3\x68\xdd\xeb\x10\xac\x3c\xf8\x52\xd9\x39\x5c\xf5\x37\xf5\x64\xb8\xee\x43\xe1\x5b\x19\x45\x0a\xf5\xcf\xf0\x6f\x70\xf7\xa7\x3e\x9b\xa9\xdb\x7e\x3b\xef\xd0\x2b\xea\x5b\x07\x24\xf7\x6a\x65\xae\xc5\xe4\xb3\x36\x67\x14\x3d\xaa\xec\x0a\x9f\xfe\xfe\xae\x2a\x05\xbf\x2b\xe3\x4f\x0b\xd9\x9d\x56\xd0\x62\xf3\xca\x6b\x30\xab\x19\xba\xf6\x0e\xcd\x6d\xd0\xa2\x41\xb3\x4d\x46\x76\xf5\x8b\x2d\x50\x69\x99\x7c\x48\x65\x42\xe6\x36\x01\x0e\x3b\xcb\x41\x9b\xa8\xd7\x8a\x2c\x39\x5a\x29\x1e\x9e\x1b\x5d\xa1\xd1\x3c\xdf\x16\x0c\x47\x02\xe1\x84\x20\x68\x8e\xfe\xff\x3a\xf2\x7f\xa9\xa8\xff\x5f\x18\xda\x60\xe7\xe1\x0e\xa7\x8e\xf8\x05\x22\x6e\xcf\xae\x5a\xbc\x51\x99\x8b\xa3\x11\xf7\x7b\x4e\xc6\x16\xf7\x84\xc5\x19\x20\x46\x91\x1d\x75\xcf\xaf\xa9\x57\x2c\x33\x85\xf9\x02\x91\x3f\x60\x47\x41\x91\x6b\xf2\x19\x66\x1d\xdb\x89\x97\x2f\x6d\xb8\x37\x15\x67\x40\xae\xb0\x8d\x6e\x30\x68\xa3\xab\x54\x28\x4e\x05\x5d\xb2\xad\x81\xe5\xd9\xc1\x6e\x48\x87\x1c\xc5\x5c\x2f\x60\x70\x70\x4a\xd8\x28\x75\x52\x13\xa9\x98\x16\xff\xcf\xf7\x98\x9f\x56\x84\x76\x36\xbb\xfb\xf9\xde\xb4\xeb\x2d\xe9\x55\xb9\xb7\xfe\x6a\xc5\x7a\xf0\xec\x7b\xb1\xcb\xb6\xaf\xb7\xf7\x6f\xbe\xfe\x3f\xfa\xcc\xe6\xe8\x24\xc5\x1d\xae\xcb\xac\xdf\x1e\x94\x8a\x38\x6a\x6a\x36\x39\xd3\xe1\xa2\x0a\xa4\x3b\x5c\x5f\x4b\xda\x7c\xac\xb2\x0e\x27\x0a\x61\xfa\x07\x0f\x46\x23\xc8\x3b\x20\xe7\x53\x0b\xc9\x92\xf6\x80\x68\x0f\xc8\xea\x09\x52\x24\xf5\xeb\xb6\x7d\x45\xce\xad\x14\xd5\x01\xb9\x70\x2d\xc4\xf8\xa3\x5d\x50\x77\x8c\xc3\x83\xe2\x1c\x1e\x1e\xeb\xd0\xbe\x4d\x86\x53\xdc\x70\xf9\xca\xda\x48\xba\xd6\xa3\x58\x32\x8e\x91\xee\x72\xc3\x7e\x0a\x1c\xf1\x47\xed\xc4\x7f\x8a\x63\x0e\x2e\x09\xb6\xe9\xf7\x2b\xb8\xa9\x88\x49\xda\xe5\xa6\xd7\x16\x92\xb2\xf9\xa2\xc3\x4f\x2f\x5f\x9e\xb2\x11\x3e\xa6\x13\x2d\x8a\x80\xf7\x70\xea\xa6\x03\x60\xdd\xb1\xb5\x89\xe7\x87\x9e\x6e\x60\xfc\xdb\x29\xa7\xa3\xd1\xe9\x15\x75\x83\x7d\x78\x51\x6d\xb0\xd0\xc9\x14\xc2\x5a\x66\x29\xd8\x4e\x0d\x5a\x02\x4d\x49\x7e\x78\x21\xf7\x60\xdb\xb6\xb7\xe4\xd5\xa5\xf5\x6c\x54\x5e\x8e\xdb\x1b\x73\x1d\xf3\xab\xff\x04\x00\x00\xff\xff\x65\xf4\xdc\xbc\x1a\x1c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7194, mode: os.FileMode(438), modTime: time.Unix(1595976254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
