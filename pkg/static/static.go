// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/index.css
// static/index.html
// static/index.js
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x8e\xa3\x30\x10\x85\xf7\x48\xdc\xa1\x46\xa3\x59\x7a\x44\x66\x35\xed\x9c\xc6\xe0\x02\x4a\x31\x55\x16\x2e\x02\x49\x2b\x77\x6f\x75\xf8\x49\xa3\x4e\x7a\xe1\x85\xeb\x7b\xb6\xbf\xe7\x52\xfc\x05\xde\xf3\x0c\x00\xa0\x73\x7d\x43\x6c\xa1\x80\x5f\xd4\x45\xe9\xd5\xb1\x1e\x67\x14\x9d\xf7\xc4\xcd\x53\x26\x67\xec\xeb\x20\xa3\x85\x96\xbc\x47\xfe\x9e\xe8\xdc\x64\x46\xf2\xda\x5a\x78\x2b\xfe\x1c\xf3\xec\x96\x67\x79\xf6\xbb\x72\x7c\x76\x69\x7d\xdd\x53\x8a\xc1\x5d\x2c\x94\x41\xaa\xd3\x72\x52\x65\xa8\x5a\xe3\x2a\x25\x61\x0b\x2c\x8c\x0b\x68\x91\x9a\x56\x2d\x1c\x8a\xfb\x85\xcf\x3c\x96\xf1\xf2\xf0\x97\x60\x94\x44\xf3\x85\x35\x4d\xe8\x37\x9f\x80\x0d\xb2\x5f\x7d\x1e\x29\x57\x26\x09\x83\xe2\xe6\x14\x2d\x14\xcb\x26\x60\xad\x8f\x5d\x14\x62\xc5\xde\xe0\x19\x59\xd3\x4e\xb8\x16\x56\x53\xbb\x8e\xc2\xc5\x42\x27\x2c\x29\xba\x6a\x07\x13\x5d\xd1\xc2\xe1\xff\xe6\x79\x9f\x8e\x4b\xd1\x52\x82\xc7\x7e\x55\xc0\x49\x4d\x6a\x9d\xff\x6c\xfb\x2f\x4e\xdb\x2a\x83\xdb\xfe\xee\x6a\x88\x3d\x4e\xf7\xea\xc5\x5a\xf2\x2f\x4b\xc2\x80\x95\xae\x35\xcd\x88\xe5\x89\xd4\xcc\x3f\x5d\xb9\x10\x64\xd0\x9d\xf9\x9a\x18\x12\xf6\x66\x3e\xbc\xe7\xa7\x56\xbb\xf0\x1a\x77\x72\xfd\x01\xa6\x97\xec\xd9\xfc\xf6\x11\x00\x00\xff\xff\x41\x4a\x44\x29\xb0\x02\x00\x00")

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 688, mode: os.FileMode(438), modTime: time.Unix(1595975103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x31\x4f\xfb\x30\x10\xc5\xf7\x4a\xfd\x0e\xf7\xbf\xb9\x69\xfe\x6c\x0c\x76\x24\xd4\x76\x60\x82\x01\x24\x18\x5d\xfb\xda\x1c\x38\x4e\xf0\x5d\x53\xfa\xed\x51\x92\x06\x95\xc9\xef\x7c\xef\xfd\x9e\x64\x9b\x7f\xdb\xa7\xcd\xcb\xfb\xf3\x0e\x6a\x6d\x62\xb5\x5c\x98\xeb\x39\x28\x72\xa1\x5a\x2e\x00\x00\x4c\x43\xea\xc0\xd7\x2e\x0b\xa9\xc5\x93\x1e\x8a\x7b\x84\xf2\xcf\xb6\x56\xed\x0a\xfa\x3a\x71\x6f\xf1\xad\x78\x7d\x28\x36\x6d\xd3\x39\xe5\x7d\x24\x04\xdf\x26\xa5\xa4\x16\x1f\x77\x96\xc2\x91\x70\x8e\x2a\x6b\xa4\x6a\x9b\xdd\xd9\x94\x93\xbe\x65\x26\xd7\x90\xc5\x9e\xe9\xdc\xb5\x59\x6f\x30\x67\x0e\x5a\xdb\x40\x3d\x7b\x2a\xc6\x61\x05\x9c\x58\xd9\xc5\x42\xbc\x8b\x64\xef\xd6\xff\x57\x70\x12\xca\xe3\xec\xf6\x91\xec\x85\xe4\xb7\x57\x7c\xe6\x4e\x41\xb2\xb7\xc8\x29\xd0\xf7\xfa\x43\xb0\x32\xe5\x74\x3f\xbb\x22\xa7\x4f\xc8\x14\x2d\x8a\x5e\x22\x49\x4d\xa4\x08\x75\xa6\xc3\x9c\xf2\x32\x32\x4d\x79\x7d\xad\xe5\xc2\xec\xdb\x70\x99\x01\x81\x7b\xe0\x60\x31\xd2\x91\x52\x40\xf0\xd1\x89\x58\x4c\xad\x50\x24\xaf\x43\x63\xe0\x7e\x76\x7b\x97\x7a\x27\x63\x60\x92\xc3\x7e\x52\x63\xc7\x95\x3c\xd6\x0d\xdf\xf4\x13\x00\x00\xff\xff\x09\x1b\x39\xf7\xbe\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 446, mode: os.FileMode(438), modTime: time.Unix(1595973647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xdb\x36\x10\xfe\x5e\xa0\xff\xe1\xaa\xa6\x88\x8c\x2a\xb2\xfc\x12\xcf\x71\xa6\x0d\x58\x96\x61\x1b\xb2\x36\x40\x0a\x74\x45\xe0\x21\xb4\x74\xb2\x05\xcb\xa4\x21\x52\x96\x0d\xcf\xff\x7d\x20\x29\xc9\xb2\x24\x27\xd9\xd0\x0e\xe1\x17\x53\xc7\x87\x77\xc7\xbb\xe7\x8e\x74\x1a\x52\x9f\xa5\x36\xa3\x11\x23\x3e\xb8\x60\xb6\xc0\xfd\x01\xb6\xaf\x5f\x01\x00\x44\x28\x60\x8e\x51\xb4\x01\x17\xee\x8d\xb7\x38\xe8\x5c\xf4\x27\x86\x05\xc6\xdb\x9e\x37\xe9\x67\xd3\x20\xc0\x4e\xe7\x42\x4d\x1d\x67\xd8\xf5\x86\x5a\x7a\x3e\xec\xf6\x3a\x6a\x7a\xd1\xe9\xe0\xa4\xaf\xa6\xfd\x41\xe0\x04\x8e\x06\x38\xbd\x2e\x0e\xd4\xd4\xef\x06\xe7\x3d\x4f\x4b\xc9\x04\x27\x98\x2b\x73\x86\x1a\x8b\x83\x09\x06\x81\x9a\x12\x32\xc0\x6e\x66\x22\x08\x48\x66\x6d\xe8\xc8\x91\x01\x82\xc0\xeb\x65\xd2\x61\x2e\x0d\x02\x7f\x38\xe9\x64\x7a\x9d\x5c\xef\x70\x6f\xe2\x17\x35\x0a\x80\xe3\x18\xe3\xcb\x7d\x10\xa2\x90\xe2\xe7\xd0\x17\x33\x2e\x23\xd1\xb5\xe0\xdc\x82\x8e\x63\x41\xd7\xb1\xa0\xef\x58\x30\x74\x2c\xe8\x0c\x1c\x0b\x7a\x52\x32\xe8\x3b\xe5\xcd\x1e\xa1\x2b\x22\x37\xfa\xcc\x4b\x16\x48\x85\x3d\x45\x71\x1d\xa1\x9c\xfe\xb4\xf9\xcd\x37\x4f\x35\xe2\xb4\x55\xb6\x88\x53\xa4\xfe\x63\x9b\x34\xe2\x60\x93\x27\xd6\xe0\x66\xf6\x24\xfe\x8a\x51\x81\x6b\x61\x1a\x5d\xdf\xc8\x71\x9e\x58\xdb\x19\x22\x95\x27\x02\x17\x32\x0e\x84\x94\x62\xac\x4e\x59\x87\xce\x30\x9c\xce\x44\x05\xfb\xab\x12\x96\xec\x2f\x63\x26\x98\xc7\x22\x70\x21\x62\x1e\x11\x21\xa3\x76\x2e\xb3\x17\x44\x78\x33\xb3\xfd\xd7\x4c\x88\x25\x6f\xb7\xe0\x47\x30\x52\xce\x0d\x18\xc9\x5f\xa3\xa4\x85\x33\x6f\x8e\xd2\x16\xc5\x14\x3e\xe3\xe4\x4e\x7d\x9b\x0f\x27\xdb\x5c\xd7\x6e\xd4\x6e\x9f\x6c\x0b\x13\x33\xc6\xc5\xae\x9d\xf2\x87\x83\x58\xb0\x88\xc5\xe0\x82\x53\x92\x85\xd4\xc7\xf5\x4d\x9e\x4b\x70\xa1\x93\x2d\xae\x48\x0c\xcb\x18\x57\x21\x4b\x64\xa2\x68\x12\x45\x97\xaf\x5f\xe9\xb5\x22\x01\xc4\xf7\xaf\x57\x48\xc5\x4d\xc8\x05\x52\x8c\xcd\x53\xc1\x12\x6f\xb6\x60\x2b\x3c\xb5\x20\x48\xa8\x27\xbd\x31\xb1\x95\x97\x8f\x1c\x68\x4b\xbd\x48\xc5\xcf\x18\x90\x24\x12\x66\xee\xe3\xce\x82\x2d\x2c\x09\xe7\xe1\x0a\x47\x10\x90\x88\x23\xec\x5a\x85\x55\x1d\x04\x9b\xd1\x05\x72\x4e\xa6\x28\x4b\x53\xe9\x29\xd7\x67\x7e\xae\x05\x9f\x4a\xb7\x7f\xbf\xfb\xf8\xc1\x5e\x92\x98\xa3\x86\xda\x3e\x11\x24\xb7\x27\x47\xc0\x62\x30\x3d\x46\xb9\xda\x02\x2c\x50\x3b\x0f\xfc\xcd\xf3\xce\x45\xcc\xe6\x78\x27\x36\x91\x34\xad\x9a\xc0\xfd\x82\x4f\x6d\x6f\x7c\x59\x07\x47\xa5\x90\xee\x4b\x45\xe1\xd3\x63\xf8\x2b\xb2\x04\x17\x8c\x98\x25\xd4\x37\x1a\x30\x13\x9c\x86\xf4\x96\x88\x99\xd9\x6a\x58\x95\x41\xff\xc4\x4c\x69\x81\xdf\x3b\x63\x0b\xf4\xac\x33\x6e\x02\x4b\x73\x05\xb8\x5b\x80\x7b\x8d\x60\x7d\xf0\x03\xa3\xbb\x2c\x63\x79\x59\xe8\x92\x60\x74\xc9\x42\x2a\x30\x96\xbe\x1c\x4d\x4f\x18\x64\x0b\x92\x07\x9c\x27\x31\x82\xeb\x82\x53\x8b\x79\x8c\x22\x89\x69\xdd\x68\xae\xa3\x60\xe7\x1b\x4d\xcf\x9a\x02\x09\xca\x48\x13\x23\xf1\x37\x77\x82\x08\x84\x37\xae\x9b\x53\xe9\xe3\xed\xf5\x87\xda\x2e\xc5\xa0\xbc\x8e\x62\x94\x97\x80\x29\xe2\x04\xab\x91\xd9\x1d\x7e\x66\x2a\x39\x52\xdf\x54\xac\xe3\x22\x0e\xe9\x34\x0c\x36\xe6\x16\xf8\x08\xee\x73\x77\xed\xb5\x55\x14\x96\xbd\xb1\x40\x87\x82\x05\x01\x47\xf1\x27\xfc\x0d\xce\xa1\xe8\x8b\x14\x8d\x2d\xf0\x46\xba\x7e\x2d\x48\x47\xd5\xaa\xdd\xb5\xaa\xce\xe9\x4e\x98\xf5\xa4\x4f\x7f\xdc\xe4\xa5\xf0\xbf\x3a\xd5\x9c\xba\x52\x53\xd9\xc2\x7a\xd4\x64\x6a\x33\xaa\x5b\x2b\xb8\x26\x47\x41\x9f\xa6\x36\xb2\x07\x70\xc1\x96\xb7\x31\x5b\x92\xa9\xca\xe6\xbe\xd1\x14\x3d\xa5\x4a\xdc\x64\x79\x94\xb6\xff\x39\xc1\xcd\xf2\x7f\x95\xd2\x97\x96\xce\xfa\xc5\xf0\x15\x33\xd3\x94\x17\x9f\xa5\xf4\x68\x66\x5e\x0c\xa3\x2a\xbe\x7b\xfa\xad\xb1\x40\x9a\x1c\xf5\xfd\x5b\xd8\x5d\xb0\x84\x63\x3a\x43\x8c\x9e\xd1\x83\x7d\x8c\x04\xf9\x02\xdf\x37\x34\xe0\xf7\xef\x15\x1b\xca\x65\x0c\x28\x2f\xe5\x0a\xee\xec\xac\x8a\xcb\x4d\xe8\x17\x47\x93\x6e\xe5\x70\xf6\x1e\x51\x57\xa9\x1d\x21\x9d\x8a\x19\x9c\x15\x2f\x90\xc2\x68\x63\x1b\xc9\x37\xeb\xdf\x77\x07\x4a\x1e\xaf\x9c\xd2\x75\x7c\xc8\xf1\x71\x7d\x1f\xcf\x6e\xfb\x07\x65\x66\x04\x27\x5b\x7d\xef\xab\xcf\xf1\xee\xf2\xe1\x5b\x34\xa5\xe2\x79\xc5\xe8\x1c\x37\x19\xf5\xf7\x8f\x29\x9d\xcf\x72\x67\x4a\x43\xe1\xcd\xf2\x84\xce\x71\x73\xc5\x7c\xac\x3f\x61\x08\x47\x18\x7e\x37\x82\x76\x1b\xd2\x86\xa5\xde\x50\x2d\x25\xcb\x7a\xa2\xea\x44\xc8\xc7\x24\x46\x32\xaf\x3e\x19\x94\xa1\x9e\xd2\xc6\x1b\x96\xfa\x8e\x5a\x92\xe7\xaa\x2b\x6c\xe6\x12\x3c\x8b\x4f\xf0\x7c\x4e\x41\xfd\x02\x7f\xf4\x38\x83\x73\xe5\x33\x69\x8a\x9b\x0e\x69\x84\x81\x68\x3a\xce\x21\xc5\x8e\x9c\xab\xd2\x6b\x1f\x3b\x60\xed\xc1\xbe\xa7\xf3\x57\x3c\xae\xe6\x82\xdf\x74\xdc\x0b\xb5\x14\xcb\xff\x39\x4d\x4c\x39\xf4\xef\x79\x36\x7d\x5d\x2c\xa3\xa7\xd1\xe5\x27\x60\x35\x10\x15\xc1\xbb\x7a\x64\x2e\x5f\x72\xfb\x68\xb7\x9f\xee\x20\x05\xe6\xe9\x26\xd2\xe0\xb9\x91\x70\x84\x0d\x4b\x62\x50\x37\x04\x08\x06\x7e\x4c\xd2\xfd\x1f\xcd\x67\xfb\xbc\xfb\x27\x00\x00\xff\xff\xe0\x24\x6a\x07\x24\x11\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 4388, mode: os.FileMode(438), modTime: time.Unix(1595974724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css":  indexCss,
	"index.html": indexHtml,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.css":  &bintree{indexCss, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
