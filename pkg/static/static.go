// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/index.css
// static/index.html
// static/index.js
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xd1\x6e\xab\x30\x0c\x86\xef\x91\x78\x07\x8b\xa3\x73\x99\xa9\xbb\xdb\xd2\xa7\x09\x89\x29\x51\x8d\x1d\x11\x53\xda\x4e\x7d\xf7\x69\x83\x30\x21\xad\xbb\xb4\xbf\xdf\x9f\x7e\xb7\x12\x6e\xf0\x51\x57\x00\x00\x83\x1b\x4f\x91\x2d\x1c\xd2\xf5\xb8\x6c\xe4\x82\x63\x47\x32\x5b\xe8\x63\x08\xc8\xc7\x12\xbc\x9a\x39\x06\xed\x2d\xbc\x1f\xfe\x1f\xeb\xea\x51\x57\x75\xf5\xcf\x3b\xbe\xb8\x5c\x6c\x21\xe6\x44\xee\x66\xa1\x69\x49\xfc\xb9\x59\x6f\x55\x26\xdf\x1b\xe7\x35\x0a\x5b\x68\x58\x18\x9b\xcd\x40\x78\x42\x0e\xc5\x90\x24\xc7\x25\xe6\xda\x2c\x34\x29\x6e\x8e\x64\xe1\xb0\x0e\x84\x9d\xfe\x4c\x49\x22\x2b\x8e\x06\x2f\xc8\x9a\x2d\x7c\xf9\x57\xd4\x09\xab\xe9\xdc\x10\xe9\x66\x61\x10\x96\x9c\x9c\xdf\xc1\x1c\xef\x68\xe1\xf5\xed\xfb\xa7\x6d\x3b\x63\x3c\xf5\x6a\xa1\x15\x0a\x38\x96\xae\x2f\x2c\x19\x09\xbd\x96\xb6\x66\xc6\xf6\x1c\xd5\x2c\x0f\x7a\x47\x24\x93\xee\x0a\x94\xc4\x94\x71\x34\xcb\xf1\x9e\x9f\x7b\x1d\xe8\x39\x1e\xe4\xfe\x07\xcc\x4f\xd9\x6f\xfb\xc7\x67\x00\x00\x00\xff\xff\x8e\x2e\xd5\x93\xf9\x01\x00\x00")

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 505, mode: os.FileMode(438), modTime: time.Unix(1595971712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x4a\xfd\x0e\xc7\xcd\x84\x88\x8d\xc1\x8e\x84\xda\x0e\x4c\x30\x80\x04\xa3\x6b\x5f\x9b\x03\xc7\x09\xbe\x6b\x4a\xbf\x3d\xca\x3f\x54\x26\x3f\xfb\xde\xfb\x3d\xc9\x67\x6e\xb6\xcf\x9b\xd7\x8f\x97\x1d\xd4\xda\xc4\x6a\xbd\x32\xf3\x39\x28\x72\xa1\x5a\xaf\x00\x00\x4c\x43\xea\xc0\xd7\x2e\x0b\xa9\xc5\x93\x1e\x8a\x07\x84\xf2\xdf\xb4\x56\xed\x0a\xfa\x3e\x71\x6f\xf1\xbd\x78\x7b\x2c\x36\x6d\xd3\x39\xe5\x7d\x24\x04\xdf\x26\xa5\xa4\x16\x9f\x76\x96\xc2\x91\x70\x89\x2a\x6b\xa4\x6a\x9b\xdd\xd9\x94\x93\xbe\x66\x26\xd7\x90\xc5\x9e\xe9\xdc\xb5\x59\xaf\x30\x67\x0e\x5a\xdb\x40\x3d\x7b\x2a\xc6\xcb\x2d\x70\x62\x65\x17\x0b\xf1\x2e\x92\xbd\xff\xab\x10\x9f\xb9\x53\x90\xec\x2d\x72\x0a\xf4\x73\xf7\x29\x58\x99\x72\x7a\x5f\x5c\x91\xd3\x17\x64\x8a\x16\x45\x2f\x91\xa4\x26\x52\x84\x3a\xd3\x61\x49\x79\x91\x81\x69\xca\xf9\x63\xd6\x2b\xb3\x6f\xc3\x65\x01\x04\xee\x81\x83\xc5\x48\x47\x4a\x01\xc1\x47\x27\x62\x31\xb5\x42\x91\xbc\x0e\x8d\x81\xfb\xc5\xed\x5d\xea\x9d\x8c\x81\x49\x0e\xf3\x49\x8d\x1d\x33\x79\xac\x9b\x36\xf2\x1b\x00\x00\xff\xff\xaf\xe4\x13\xda\xab\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 427, mode: os.FileMode(438), modTime: time.Unix(1595971147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xdb\x36\x10\xfe\x5e\xa0\xff\xe1\xaa\xa6\xa8\x8d\x2a\xb2\xfc\x12\x4f\xb1\xa7\x0d\x58\xd6\x61\x1b\xba\x36\x40\x0a\x74\x41\xe0\x21\xb4\x74\xb2\x05\xcb\xa4\x40\x52\x91\x0d\xc3\xff\x7d\x20\xf5\x12\xc9\x92\x13\x6f\x68\xb1\x29\x1f\x4c\x91\x0f\xef\xb9\x3b\x3e\xc7\x53\xd2\x90\xfa\x2c\xb5\x18\x8d\x18\xf1\xc1\x85\x4e\x17\xdc\x1f\x60\xf7\xf2\x05\x00\x40\x84\x12\x56\x18\x45\x5b\x70\xe1\xce\x78\x8d\xe3\xfe\xe5\x68\x6e\x98\x60\xbc\x1e\x7a\xf3\x51\x3e\x0c\x02\xec\xf7\x2f\xf5\xd0\xb6\x9d\x81\xe7\x64\xb3\x17\xce\x60\xd8\xd7\xc3\xcb\x7e\x1f\xe7\x23\x3d\x1c\x8d\x03\x3b\xb0\x33\x80\x3d\x1c\xe0\x58\x0f\xfd\x41\x70\x31\xf4\xb2\x59\x32\xc7\x39\x16\xc6\x6c\x27\xc3\xe2\x78\x8e\x41\xa0\x87\x84\x8c\x71\x90\x53\x04\x01\xc9\xd9\x1c\x5b\x3d\x39\x20\x08\xbc\x61\x3e\xeb\x14\xb3\x41\xe0\x3b\xf3\x7e\x6e\xd7\x2e\xec\x3a\x8f\x14\xbf\xe8\xa7\x04\xd8\xb6\x31\x9b\x3e\x26\x21\x0a\x29\x7e\x09\x7d\xb9\x14\x2a\x13\x03\x13\x2e\x4c\xe8\xdb\x26\x0c\x6c\x13\x46\xb6\x09\x8e\x6d\x42\x7f\x6c\x9b\x30\x54\x33\xe3\x91\x5d\xdd\xec\x11\xfa\x40\xd4\x46\x9f\x79\xc9\x1a\xa9\xb4\x16\x28\xdf\x47\xa8\x86\x3f\x6d\x7f\xf3\x3b\x6f\x33\xc4\xdb\x6e\x95\x11\x17\x48\xfd\xa7\x36\x65\x88\xda\x26\x4f\x6e\xc0\xcd\xf9\x14\xfe\x8a\x51\x89\x1b\xd9\x31\x06\xbe\x51\xe0\x3c\xb9\xb1\x72\x44\xaa\x22\x02\x17\x72\x0d\x84\x94\x22\xd7\x51\x36\xa1\x4b\x0c\x17\x4b\x79\x80\xfd\x55\x4f\x56\xf8\x63\xce\x24\xf3\x58\x04\x2e\x44\xcc\x23\x32\x64\xd4\x2a\xe6\xac\x35\x91\xde\xb2\xd3\xfb\x6b\x29\x65\x2c\x7a\x5d\xf8\x11\x8c\x54\x08\x03\x26\xea\xd7\xa8\x58\x11\xcc\x5b\xa1\xe2\xa2\x98\xc2\x17\x9c\xdf\xe8\xf7\xce\xfd\xd9\xae\xb0\xb5\x9f\xf4\x7a\x67\xbb\x92\x62\xc9\x84\xdc\xf7\x52\x71\x5f\xcb\x05\x8b\x18\x07\x17\xec\xca\x5c\x48\x7d\xdc\x7c\x28\xce\x12\x5c\xe8\xe7\x8b\x0f\x84\x43\xcc\xf1\x21\x64\x89\x3a\x28\x9a\x44\xd1\xf4\xe5\x0b\xf5\xa7\x56\x33\x87\x2c\x46\xd7\x28\x04\x59\xa0\x2a\x13\x7c\x40\x2a\xab\xb5\x52\x70\xac\xc5\x42\x99\xf8\xfd\xe6\xd3\x47\x2b\x26\x5c\x60\x06\xb5\x7c\x22\x49\xe1\x9f\x7a\x02\xc6\xa1\xe3\x31\x2a\xf4\x16\x60\x81\xde\xd9\xad\x9a\x2b\xce\x40\x48\xce\x56\x78\x23\xb7\x91\xa2\xd6\x05\x79\xb7\x16\x0b\xcb\x9b\x4d\x9b\xe0\xa8\x12\xde\xa3\x6c\x35\x3e\x3d\x86\xbf\x22\x31\xb8\x60\x70\x96\x50\xdf\x68\xc1\xcc\x71\x11\xd2\x6b\x22\x97\x9d\x6e\xcb\xea\x9a\x3d\xe0\x67\xd6\x51\x0c\xe2\xce\x9e\x99\x90\x8d\xfa\xb3\x36\xb0\xa2\x2b\xc1\x83\x12\x3c\x6c\x05\x67\x81\xd7\x48\xf7\xd9\x70\x3f\x2d\x0e\x27\x17\x28\xa3\x31\x0b\xa9\x44\xae\xbc\x39\x7a\x40\x61\x90\x2f\x58\x31\x47\x21\x12\x8e\xe0\xba\x60\x37\xb2\xce\x51\x26\x9c\x36\x69\xd5\x53\xee\x57\xbf\x3f\x63\x40\x92\x48\xd6\x5c\x54\x24\xa5\x98\x5e\x65\x6a\x6a\x30\x28\x50\xae\x2b\x8e\xc4\xdf\xde\x48\x22\x11\x5e\xb9\x6e\xa1\xb6\x4f\xd7\xef\x3f\x36\x76\x69\x91\x15\xb2\xe7\xa8\xee\xec\x8e\xe4\x09\x1e\x26\x6f\x5f\x7f\xcd\x4d\x0a\xa4\x7e\x47\x0b\x53\x48\x1e\xd2\x45\x18\x6c\x3b\x3b\x10\x13\xb8\x2b\xdc\xb5\x36\x66\x59\x07\xd6\xd6\xcc\x63\xf5\xa2\x10\xa9\xfc\xb3\xfe\x7a\x3b\x33\xc1\x9b\x64\x65\x66\x42\x3a\x39\x2c\xae\x7d\xb7\xe5\xd8\xd4\x53\xa9\xb3\x1d\x6c\x26\x87\x1c\xdb\xfa\xcc\xad\x3e\xea\x93\x73\x9f\x01\x84\x64\xf1\x35\x67\x31\x59\xe8\x4c\x95\x88\xe3\xaa\x49\xe2\xa3\x9a\xf9\xd7\xc9\x6b\x9f\xff\x47\x69\x6b\xde\x49\x5f\x31\x13\x6d\x79\xf0\x59\x4a\x8f\x66\xe2\x3f\x3f\xb9\x03\x9f\xbd\xac\xbd\xad\x91\x26\x47\x7d\xfe\x16\xbc\x6b\x96\x08\x4c\x97\x88\xd1\x09\x17\x8d\x8f\x91\x24\xb7\xf0\x7d\xcb\x2d\xf3\xee\x9d\x96\x41\xb5\x4c\x00\x23\x81\x87\xb8\xf3\xf3\x43\x5c\x41\x91\x35\xb9\x36\xdb\xda\xe1\xbc\x05\xea\x8e\x61\x45\x48\x17\x72\x09\xe7\x65\xd3\x6b\xa9\xcd\xca\xb0\xd8\x9c\xfd\xbe\xa9\x19\x99\x56\x5b\x9e\xfa\x0a\xc9\xbf\x07\x3e\xff\xf1\xa1\xde\x75\xea\xe2\x9e\x35\xf7\x89\xbc\xa9\xdd\x6b\x9a\x09\x9c\xed\xb2\xf6\xa6\x5f\x67\xfb\xe9\xfd\xb7\x28\xfe\xf2\x93\x8a\xd1\x15\x6e\x73\xc9\x07\x09\xf5\x34\x3e\x3f\xcf\xea\x0d\x90\x86\xd2\x5b\x16\x07\xba\xc2\xed\x15\xf3\xb1\xd9\xa9\x89\x40\x70\xbe\x9b\x40\xaf\x07\x69\xcb\xd2\xd0\xd1\x4b\x49\xdc\x3c\xa8\xa6\x10\x8a\x67\xce\x91\xac\x0e\x3b\xa3\x26\x1a\x6a\x6b\xa2\x65\x69\x64\xeb\x25\x15\x57\xd3\x60\xbb\x96\xe0\x24\x3d\xc1\xe9\x9a\x82\x66\x13\x7a\x32\x9c\xf1\x85\xf6\x99\xb4\xe5\x2d\x4b\x69\x84\x81\x6c\x0b\xa7\x2e\xb1\x23\x71\x1d\x5c\xb2\x4f\x05\xd8\xf8\x46\x7c\x94\xf3\x57\x0c\x37\xd3\x82\xdf\x16\xee\xa5\x5e\xe2\xea\xd3\xba\x4d\x29\x75\xff\x4e\xe3\xf4\xb3\x62\x99\x3c\x8f\xae\x04\xd1\x48\xc4\xc1\xc4\x9b\x66\x66\xa6\xff\xe7\xeb\xa3\xd7\x7b\xfe\x06\x29\x31\xcf\x5f\x22\x2d\x9e\x1b\x89\x40\xd8\xb2\x84\x83\xee\x10\x20\x19\xf8\x9c\xa4\x8f\xff\xdb\x9c\xec\xf3\xfe\xef\x00\x00\x00\xff\xff\x51\x89\x62\xe1\x97\x0f\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3991, mode: os.FileMode(438), modTime: time.Unix(1595972323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css":  indexCss,
	"index.html": indexHtml,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.css":  &bintree{indexCss, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
