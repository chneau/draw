// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/index.css
// static/index.html
// static/index.js
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x6a\xc3\x30\x0c\x86\xef\x81\xbc\x83\x60\xec\x36\x8f\xee\x30\x18\xee\xd3\x38\xb6\xd2\x98\x28\x52\xb0\x95\xa4\xcd\xe8\xbb\x8f\x92\x26\x5b\x60\xdd\x65\x47\xfd\x9f\xfc\xf3\x19\x35\xda\xd1\x4b\x59\x54\x12\x2e\xf0\x59\x16\x00\x00\xbd\xe4\xa8\x51\xd8\x82\xab\xb2\xd0\xa0\x78\x5c\x80\x4a\x6f\xe1\x70\x1f\x08\x6b\xfd\x9e\x66\x13\x39\xe0\xd9\xc2\xfb\x3d\xa8\x9c\x6f\x4f\x49\x06\x0e\xc6\x0b\x49\xb2\x30\x35\x71\x6b\x92\x11\x53\x4d\x32\x99\xb3\x85\x26\x86\x80\x7c\x2c\x8b\x6b\x59\x94\xc5\x93\x77\x3c\xba\xbc\xba\xa8\x0c\xbe\x31\xce\x2f\x3e\x2c\x8c\xdb\x22\xe1\x09\x39\xfc\x47\xba\x97\xc8\x8a\xc9\xe0\x88\xac\x79\xab\xbf\xa1\x5a\x58\x4d\xed\xba\x48\x17\x0b\x9d\xb0\xe4\xde\xf9\x1d\xcc\x71\x46\x0b\x6f\x1f\x87\xe7\x9f\xe9\x84\xf1\xd4\xa8\x85\x4a\x28\x60\x5a\x5d\x5f\x59\x32\x12\x7a\x5d\x6d\xcd\x84\x55\x1b\xd5\x2c\xdf\xf3\x8e\x48\x06\xdd\x09\xac\x1b\x43\xc6\x64\x96\xc7\x7b\xde\xde\x2e\xf7\x18\x77\x32\xff\x01\xf3\x43\xf6\x5b\x7e\xfd\x0a\x00\x00\xff\xff\x8c\xd0\x36\xd8\x25\x02\x00\x00")

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 549, mode: os.FileMode(438), modTime: time.Unix(1595970654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x3d\x6f\xe3\x30\x0c\xdd\x03\xe4\x3f\xf0\xb8\xfb\x7c\xb7\x1d\x10\xcb\xc0\x21\xc9\xd0\xa9\x1d\x5a\xa0\x1d\x15\x89\x89\xd9\x4a\xb2\x2b\xd2\x4e\xf2\xef\x0b\xdb\x31\x9a\x4e\x7a\xfc\x78\xef\xe1\x89\xd5\xaf\xdd\xe3\xf6\xf9\xed\x69\x0f\x8d\xc6\x50\xaf\x57\xd5\xed\x1d\x11\x59\x5f\xaf\x57\x00\x00\x55\x24\xb5\xe0\x1a\x9b\x85\xd4\x60\xaf\xc7\xe2\x1f\x42\xf9\x63\xda\xa8\x76\x05\x7d\xf6\x3c\x18\x7c\x2d\x5e\xfe\x17\xdb\x36\x76\x56\xf9\x10\x08\xc1\xb5\x49\x29\xa9\xc1\x87\xbd\x21\x7f\x22\x5c\xa8\xca\x1a\xa8\xde\x65\x7b\xae\xca\x19\xdf\x6b\x26\x1b\xc9\xe0\xc0\x74\xee\xda\xac\x77\x32\x67\xf6\xda\x18\x4f\x03\x3b\x2a\xa6\x62\x03\x9c\x58\xd9\x86\x42\x9c\x0d\x64\xfe\x6e\x20\xda\x0b\xc7\x3e\x7e\x37\x7a\xa1\x3c\x55\xf6\x10\xc8\xfc\xd9\xdc\x45\x10\x97\xb9\x53\x90\xec\x0c\x72\xf2\x74\xf9\xfd\x2e\x58\x57\xe5\xdc\x5f\xb6\x02\xa7\x0f\xc8\x14\x0c\x8a\x5e\x03\x49\x43\xa4\x08\x4d\xa6\xe3\xc2\x72\x22\x63\xb6\xaa\xbc\xfd\xde\x7a\x55\x1d\x5a\x7f\x5d\x04\x3c\x0f\xc0\xde\x60\xa0\x13\x25\x8f\xe0\x82\x15\x31\x98\x5a\xa1\x40\x4e\x47\x47\xcf\xc3\xb2\xed\x6c\x1a\xac\x4c\x84\x19\x8e\xf3\x19\x4d\x1e\x37\xe5\xc9\x6e\x3c\xdb\x57\x00\x00\x00\xff\xff\x97\x5a\xcb\xd5\xce\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 462, mode: os.FileMode(438), modTime: time.Unix(1595970764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x8f\xda\x46\x10\x7e\x8f\x94\xff\x61\xe2\x24\x8a\x51\x7c\xc6\x06\x8e\xfa\xa0\x6e\xa5\x5e\x53\xb5\x55\x9a\x44\xba\x48\xe9\xe9\x44\x75\x8b\x3d\x06\x0b\xb3\x8b\x76\xd7\x18\x84\xf8\xdf\xab\x5d\xdb\xe0\x5f\x47\x4f\x55\x1f\xea\x7b\x60\x3c\xfb\xed\x7c\x3b\x33\xdf\x8e\x2f\x8b\x69\xc8\x32\x9b\xd1\x84\x91\x10\x7c\x30\x7b\xe0\xff\x00\x87\x97\x2f\x00\x00\x12\x94\xb0\xc2\x24\xd9\x83\x0f\x0f\xc6\x6b\x1c\xbb\x37\xa3\xb9\x61\x81\xf1\x7a\x18\xcc\x47\x85\x19\x45\xe8\xba\x37\xda\x74\x1c\x6f\x10\x78\xb9\xf7\xda\x1b\x0c\x5d\x6d\xde\xb8\x2e\xce\x47\xda\x1c\x8d\x23\x27\x72\x72\x80\x33\x1c\xe0\x58\x9b\xe1\x20\xba\x1e\x06\xb9\x97\xcc\x71\x8e\x65\x30\xc7\xcb\xb1\x38\x9e\x63\x14\x69\x93\x90\x31\x0e\x0a\x8a\x28\x22\x05\x9b\xe7\xa8\xa7\x00\x44\x51\x30\x2c\xbc\x5e\xe9\x8d\xa2\xd0\x9b\xbb\x45\x5c\xa7\x8c\xeb\x9d\x29\x7e\xd1\xcf\x09\xe0\x38\xc6\x6c\x7a\x2e\x42\x12\x53\xfc\x16\x87\x72\x29\x54\x25\x06\x16\x5c\x5b\xe0\x3a\x16\x0c\x1c\x0b\x46\x8e\x05\x9e\x63\x81\x3b\x76\x2c\x18\x2a\xcf\x78\xe4\x54\x37\x07\x84\x6e\x89\xda\x18\xb2\x20\x5d\x23\x95\xf6\x02\xe5\x87\x04\x95\xf9\xd3\xfe\xb7\xd0\x7c\x97\x23\xde\xf5\xaa\x8c\xb8\x40\x1a\x5e\xda\x94\x23\x6a\x9b\x02\xb9\x03\xbf\xe0\x53\xf8\x5b\x46\x25\xee\xa4\x69\x0c\x42\xa3\xc4\x05\x72\x67\x17\x88\x4c\x65\x04\x3e\x14\x1a\x88\x29\x45\xae\xb3\x6c\x43\x97\x18\x2f\x96\xb2\x81\xfd\x55\x3b\x2b\xfc\x1b\xce\x24\x0b\x58\x02\x3e\x24\x2c\x20\x32\x66\xd4\x2e\x7d\xf6\x9a\xc8\x60\x69\xf6\xff\x5a\x4a\xb9\x11\xfd\x1e\xfc\x08\x46\x26\x84\x01\x13\xf5\x6b\x54\xa2\x08\x16\xac\x50\x71\x51\xcc\xe0\x1b\xce\xef\xf4\xbb\xf9\xf8\xe6\x50\xc6\x3a\x4e\xfa\xfd\x37\x87\x13\xc5\x92\x09\x79\xec\x67\xe2\xb1\x56\x0b\x96\x30\x0e\x3e\x38\x15\x5f\x4c\x43\xdc\x7d\x2c\x7b\x09\x3e\xb8\xc5\xe2\x96\x70\xd8\x70\xdc\xc6\x2c\x55\x8d\xa2\x69\x92\x4c\x5f\xbe\x50\x7f\x6a\x35\x3f\x90\xcd\xe8\x1a\x85\x20\x0b\x54\xd7\x04\xb7\x48\x65\xf5\xae\x94\x1c\x6b\xb1\x00\x1f\x7e\xbf\xfb\xfc\xc9\xde\x10\x2e\x30\x47\xda\x21\x91\xa4\x3c\x5e\x59\x5b\x21\x39\x5b\xe1\x9d\xdc\x27\x2a\xa4\xbe\x68\x0f\x6b\xb1\xb0\x83\x59\x03\x98\x54\x8e\x7c\x96\xa2\xc6\x66\x5d\xd8\x5b\xb2\x01\x1f\x0c\xce\x52\x1a\x1a\x8d\xf5\x39\x2e\x62\xfa\x85\xc8\xa5\xd9\x3c\xce\x9a\x6d\xf1\x2b\x33\x55\x54\xf1\xe0\xcc\x2c\xc8\x2d\x77\xd6\x04\x2a\x8a\x13\x70\x70\x02\x0e\x5b\xc0\x3c\xc1\x13\xd1\x71\x5a\x56\xb4\x50\x15\xa3\x1b\x16\x53\x89\x5c\x51\x3f\x59\xd5\x38\x2a\x16\xec\x0d\x47\x21\x52\x8e\xe0\xfb\xe0\xf4\xaa\x18\xf5\x70\x94\x29\xa7\x95\x23\x1c\xcf\xe6\x69\xbf\xfa\xfd\x19\x23\x92\x26\xb2\x56\x00\x45\x72\x52\xc0\xab\x5c\x02\x2d\x06\x05\x2a\xc4\xc0\x91\x84\xfb\x3b\x49\x24\xc2\x2b\xdf\x2f\x25\xf2\xf9\xcb\x87\x4f\xad\x5d\x5a\x19\xa5\x56\x39\xaa\x41\x6b\x4a\x9e\x62\x95\xbe\x71\xdc\x8a\xea\x04\xd2\xd0\xd4\x72\x12\x92\xc7\x74\x11\x47\x7b\xf3\x00\x62\x02\x0f\xe5\x71\xed\x9d\x75\x12\xaf\xbd\xb7\x8a\x5c\x83\x24\x46\x2a\xff\xac\xbf\xde\xcf\x2c\x08\x26\xf9\xdd\xb0\x20\x9b\x34\x6f\xc4\xb1\xd7\xeb\xae\x5f\xe5\x72\x1c\x60\x37\x69\x72\xec\xeb\x9e\x7b\xdd\xea\xcb\x2d\x4f\x37\x4f\x36\xbc\x7d\x13\xcf\xa1\x1a\xc1\x82\x7c\xc2\xad\x91\xa6\x4f\x86\xbb\xd8\xfb\xce\xa8\x6b\x96\x0a\xcc\x96\x88\xc9\xbf\x0b\x5a\x57\x6d\x88\x89\x24\xf7\xf0\x7d\x87\x64\xdf\xbf\xd7\xad\xa8\xd6\x1c\x30\x11\xd8\xc4\x5d\x5d\x35\x71\x25\x45\x3e\xe6\xba\x62\xeb\x8c\x8a\x21\xa8\x67\x8b\x9d\x20\x5d\xc8\x25\x5c\x9d\xc6\x5e\x47\xa3\x2b\x66\xb9\x39\xff\x7d\x5b\x0b\x32\xad\x0e\x3d\xf5\x1d\x2a\xbe\x08\x5f\xff\xf8\x58\x9f\x51\x75\x81\xcd\xda\xfb\x44\x31\xfe\x1e\x35\xcd\x04\xde\x1c\xf2\x41\xa8\x5f\x67\xc7\xe9\x63\x4b\x49\xa7\x2f\x22\xa3\x2b\xdc\x87\x2c\xa3\xe0\x43\x94\xd2\x40\x5d\x30\x13\xb7\xb2\x56\x0a\x91\xc5\x32\x58\xaa\x5e\x48\x7b\x85\xfb\x5b\x16\x62\xab\x54\x01\x11\x08\xde\x77\x13\xe8\xf7\x21\xeb\x58\x1a\x7a\x7a\x29\xdd\xb4\x2b\xdc\xee\x60\xf9\xcc\x39\x92\xd5\xb4\x8b\x68\xa8\xa3\x89\x8e\xa5\x91\xa3\x97\x54\x4e\xed\x80\xdd\x22\x80\x67\x09\x01\x9e\x2f\x06\x68\x8f\xa2\x8b\xe9\x8c\xaf\xf5\x99\x49\x57\xdd\xf2\x92\x26\x18\xc9\xae\x74\xea\xda\x78\x22\xaf\xc6\x84\xba\x94\x60\xeb\xf3\x7e\xd6\xe1\x7f\x98\x6e\xae\x85\xb0\x2b\xdd\x1b\xbd\xc4\xd5\x7f\x45\x5d\x4a\xa9\x9f\xef\x79\x9c\x61\x3e\x5a\x26\xff\x8c\xae\x24\xd1\x2a\x44\xc3\xf1\xb6\x5d\x99\xe9\xff\xff\xde\x77\x10\x1a\xa9\x40\xd8\xb3\x94\x83\x1e\xd9\x20\x19\x84\x9c\x64\xe7\xff\x26\x9f\x4d\x75\xfc\x3b\x00\x00\xff\xff\xb4\x20\xce\xd2\x09\x0d\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3337, mode: os.FileMode(438), modTime: time.Unix(1595969870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css":  indexCss,
	"index.html": indexHtml,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.css":  &bintree{indexCss, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
