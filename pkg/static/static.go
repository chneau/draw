// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/index.css
// static/index.html
// static/index.js
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x6e\x83\x30\x0c\x86\xef\x48\xbc\x83\xa5\x69\xc7\x4c\xf4\x36\xa5\x4f\x13\x88\x69\xac\x1a\x1b\x11\x03\x6b\xa7\xbe\xfb\x0e\x90\x6d\x48\xeb\x8e\xfe\x3f\x7f\xd2\xd7\x6a\xbc\xc1\x67\x5d\x01\x00\x0c\x61\xba\x90\x78\x68\xc6\x8f\xf3\xb6\xe8\x82\x53\xcf\xba\x7a\x48\x14\x23\xca\xb9\xae\x1e\x75\x55\x57\x2f\x5d\x90\x25\xe4\x22\x26\xa4\x4b\x32\x0f\xa7\xa6\x59\xd2\xae\xae\x14\x2d\x6d\xd3\xfa\xad\x31\x5e\x50\x62\xd1\x46\xcd\x64\xa4\xe2\x21\xb4\x59\x79\x36\xdc\x5d\xd3\xd1\x43\xb3\x1f\x8c\xbd\xfd\x5c\xa3\x92\x18\x4e\x0e\x17\x14\xcb\x1e\x44\xa5\x58\xbd\x8a\xb9\x3e\x0c\xc4\x37\x0f\x83\x8a\xe6\x31\x74\x07\x98\xe9\x8e\x1e\x4e\xef\xcd\xeb\xef\x75\xdd\xeb\x5b\xe5\x88\x53\x69\x7d\x13\xcd\xc8\xd8\x59\xa9\x75\x2b\xb6\x57\x32\x67\x3a\x77\xc9\x75\x81\x59\x67\x3b\x04\x94\x8f\x39\xe3\xe4\x36\xf9\xc8\xaf\xc9\x06\x7e\x8e\x07\xbd\xff\x03\xf3\x53\xf6\xd7\xfe\xa8\xab\xaf\x00\x00\x00\xff\xff\x52\xcd\x11\x80\xdb\x01\x00\x00")

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 475, mode: os.FileMode(438), modTime: time.Unix(1595745381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x4a\xfd\x0e\xc7\xcd\x84\x88\x8d\xc1\x8e\x84\xda\x0e\x4c\x30\x80\x04\xa3\x6b\x5f\x9b\x03\xc7\x09\xbe\x6b\x4a\xbf\x3d\xca\x3f\x54\x26\x3f\xfb\xde\xfb\x3d\xc9\x67\x6e\xb6\xcf\x9b\xd7\x8f\x97\x1d\xd4\xda\xc4\x6a\xbd\x32\xf3\x39\x28\x72\xa1\x5a\xaf\x00\x00\x4c\x43\xea\xc0\xd7\x2e\x0b\xa9\xc5\x93\x1e\x8a\x07\x84\xf2\xdf\xb4\x56\xed\x0a\xfa\x3e\x71\x6f\xf1\xbd\x78\x7b\x2c\x36\x6d\xd3\x39\xe5\x7d\x24\x04\xdf\x26\xa5\xa4\x16\x9f\x76\x96\xc2\x91\x70\x89\x2a\x6b\xa4\x6a\x9b\xdd\xd9\x94\x93\xbe\x66\x26\xd7\x90\xc5\x9e\xe9\xdc\xb5\x59\xaf\x30\x67\x0e\x5a\xdb\x40\x3d\x7b\x2a\xc6\xcb\x2d\x70\x62\x65\x17\x0b\xf1\x2e\x92\xbd\xff\xab\x10\x9f\xb9\x53\x90\xec\x2d\x72\x0a\xf4\x73\xf7\x29\x58\x99\x72\x7a\x5f\x5c\x91\xd3\x17\x64\x8a\x16\x45\x2f\x91\xa4\x26\x52\x84\x3a\xd3\x61\x49\x79\x91\x81\x69\xca\xf9\x63\xd6\x2b\xb3\x6f\xc3\x65\x01\x04\xee\x81\x83\xc5\x48\x47\x4a\x01\xc1\x47\x27\x62\x31\xb5\x42\x91\xbc\x0e\x8d\x81\xfb\xc5\xed\x5d\xea\x9d\x8c\x81\x49\x0e\xf3\x49\x8d\x1d\x33\x79\xac\x9b\x36\xf2\x1b\x00\x00\xff\xff\xaf\xe4\x13\xda\xab\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 427, mode: os.FileMode(438), modTime: time.Unix(1595745381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x7d\x6f\xdb\xb6\x13\xfe\xbf\x40\xbf\xc3\x55\x4d\x51\x1b\x51\x64\xc9\x76\xfc\x73\x9c\x9f\x36\x60\x59\x87\x75\xe8\xda\x00\x29\x90\x05\x81\x87\xd0\xd2\xc9\x12\x2c\x93\x86\x48\x59\x36\x0c\x7f\xf7\x81\xd4\x8b\xf5\xe6\xbc\x14\x01\x36\xb5\x40\xa8\xe3\xc3\xe7\x8e\x77\x0f\x8f\x72\x12\x50\x97\x25\x06\xa3\x21\x23\x2e\xd8\xd0\xe9\x82\xfd\x13\xec\xde\xbe\x01\x00\x08\x51\xc0\x02\xc3\x70\x0b\x36\xdc\x6b\xef\x71\x64\x5d\x0c\x67\x9a\x0e\xda\xfb\x81\x33\x1b\x66\x43\xcf\x43\xcb\xba\x50\x43\xd3\x1c\xf7\x9d\x71\x6a\x3d\x1f\xf7\x07\x96\x1a\x5e\x58\x16\xce\x86\x6a\x38\x1c\x79\xa6\x67\xa6\x00\x73\xd0\xc7\x91\x1a\xba\x7d\xef\x7c\xe0\xa4\x56\x32\xc3\x19\xe6\x64\xe6\x38\xc5\xe2\x68\x86\x9e\xa7\x86\x84\x8c\xb0\x9f\xb9\xf0\x3c\x92\x79\x1b\x9b\xf2\xc9\x00\x9e\xe7\x0c\x32\xeb\x38\xb7\x7a\x9e\x3b\x9e\x59\x19\xaf\x99\xf3\x8e\x0f\x2e\x7e\x53\x4f\x01\x30\x4d\x6d\x7a\x79\x48\x42\x18\x50\xbc\x0d\x5c\xe1\x73\x99\x89\xbe\x0e\xe7\x3a\x58\xa6\x0e\x7d\x53\x87\xa1\xa9\xc3\xd8\xd4\xc1\x1a\x99\x3a\x0c\xa4\x65\x34\x34\xcb\x8b\x1d\x42\xd7\x44\x2e\x74\x99\x13\x2f\x91\x0a\x63\x8e\xe2\x53\x88\x72\xf8\xcb\xf6\xb3\xdb\xf9\x98\x22\x3e\x76\xcb\x1e\x71\x8e\xd4\x7d\x6c\x51\x8a\xa8\x2c\x72\xc4\x06\xec\xcc\x9f\xc4\x5f\x31\x2a\x70\x23\x3a\x5a\xdf\xd5\x72\x9c\x23\x36\x46\x86\x48\xe4\x8e\xc0\x86\x4c\x03\x01\xa5\x18\xa9\x5d\x36\xa1\x3e\x06\x73\x5f\xd4\xb0\xbf\x2b\x63\xc9\xff\x2a\x62\x82\x39\x2c\x04\x1b\x42\xe6\x10\x11\x30\x6a\xe4\x36\x63\x49\x84\xe3\x77\x7a\x7f\xfb\x42\xac\x78\xaf\x0b\x3f\x83\x96\x70\xae\xc1\x44\xfe\xd5\x4a\x2c\x9c\x39\x0b\x94\xbe\x28\x26\x70\x8b\xb3\x1b\xf5\xde\x79\x38\xd9\xe5\x5c\xfb\x49\xaf\x77\xb2\x2b\x5c\xf8\x8c\x8b\x7d\x2f\xe1\x0f\x95\x5c\xb0\x90\x45\x60\x83\x59\xb2\x05\xd4\xc5\xcd\x97\xbc\x96\x60\x83\x95\x4d\xae\x49\x04\xab\x08\xd7\x01\x8b\x65\xa1\x68\x1c\x86\x97\x6f\xdf\xc8\x7f\x72\x36\x0d\xc8\x60\x74\x89\x9c\x93\x39\xca\x63\x82\x6b\xa4\xa2\x7c\x56\x72\x1f\x4b\x3e\x07\x1b\xfe\xb8\xf9\xf6\xd5\x58\x91\x88\x63\x8a\x34\x5c\x22\x48\x1e\x5e\x9e\x5b\x2e\x22\xb6\xc0\x1b\xb1\x0d\x25\xa5\x3a\x68\xf7\x4b\x3e\x37\x9c\x69\x0d\x18\x96\x42\x3e\x48\x51\x61\x93\x36\xec\x15\x59\x81\x0d\x5a\xc4\x62\xea\x6a\xb5\xf9\x19\xce\x03\x7a\x4d\x84\xdf\xa9\x87\xb3\x64\x6b\xfc\xce\x3a\x92\x95\xdf\x9b\x53\x1d\xd2\x91\x35\xad\x03\xa5\x8b\x02\xd8\x2f\x80\x83\x06\x30\xdd\x60\xe1\x68\x5f\xca\x69\xaf\x27\xff\xdf\x7e\xbe\x2e\x5e\x33\xa5\x31\x2a\x58\xec\xf8\x32\x98\xd6\x3c\xf7\x7a\x8a\x3e\xcd\xaa\xac\x19\x52\xf1\x2b\x7a\x24\x0e\x45\xe1\x28\xc3\x04\x5e\xb6\xde\x50\x94\xc8\xe1\x5d\x5a\xdb\x6e\x8d\x2c\x97\x80\x82\x81\x0d\x95\x45\xf7\xc5\x61\x2e\xa1\x25\x75\x21\x98\x47\x58\x4b\xf2\xe1\x48\xdd\x8e\xd2\x05\x17\x51\x40\xe7\x81\xb7\xed\xec\x80\x4f\xe0\x3e\x27\x32\x36\x7a\xa1\x42\x63\xab\xa7\xe1\x18\x4e\x18\x20\x15\x7f\x55\x5f\xef\xa6\x3a\x38\x93\x54\xe4\x3a\x24\x93\xba\xb4\xf7\xdd\x6e\x33\xe8\x7d\xc3\x52\xd2\xfc\x0e\x36\x93\xba\xc7\x6d\xd5\x72\xa7\x2a\x58\xa3\x88\x50\xc4\x11\xad\xda\xab\x8e\x9a\x07\x2b\x9b\xcc\x60\x45\xe1\x97\x2c\xe6\x78\xb4\xf0\x4f\x56\xbd\x5a\xf2\xc4\x0f\x64\x2d\x6d\xb0\xba\x65\x86\x27\x8b\x57\x07\x66\xd5\x8b\x90\xb8\xdb\x1b\x41\x04\xc2\x3b\xdb\xce\x6b\xfa\xed\xfa\xd3\xd7\xd6\x95\xf2\x29\xfa\x53\x84\xf2\x72\xed\x88\x28\xc6\x72\xac\xb5\xb2\xbc\x8a\x64\xd2\xbd\x17\x05\x2c\xbf\x3e\x5f\x32\x47\x02\xab\x8b\xa5\xe6\x6b\x5b\xb5\x1c\xc4\xd2\xaa\x94\x1a\x7f\xbb\x46\xd2\x86\xd1\xd4\x48\xbc\x3a\xaa\x90\x16\x01\x0c\x1a\x15\x3a\x3d\xad\xee\xbd\x3d\xa6\x16\xaa\x7e\x83\xea\xec\xec\x28\x55\xce\x51\xcb\xf3\xff\xc1\x6c\x17\x5b\xfd\x72\x3a\x74\x7a\x23\x44\x3a\x17\x3e\x9c\x15\x17\x56\x4b\xb8\xe5\xc8\xeb\x54\x35\xc3\x87\x26\xf7\x65\xf9\x16\x93\x1f\x16\xd9\x15\xff\xfd\xcf\x2f\xd5\x4b\xa7\x4a\x35\x6d\xae\xe3\xd9\x7d\xf6\xa0\x94\x36\x81\x93\x5d\x7a\xb3\xa9\xd7\xe9\xfe\xf2\xa1\xe5\x36\x28\xca\xeb\xa4\x5f\x2c\x4b\xa4\xf1\x8f\x35\x81\x56\x56\x25\x9a\xc4\x47\x0c\x5f\xa3\xb3\xb8\x18\x0a\x72\xd7\x5a\xc7\xd3\x53\xb5\xcb\xb2\x9e\x00\x43\x8e\x4d\xd5\xd4\x71\xb9\x8b\xf4\xb3\xe5\x98\x46\xf2\x8f\x1a\x95\xd1\x97\xaa\x22\x5f\x9c\xfe\xfd\x50\x21\xf9\xb7\xca\x2f\x47\xc5\x17\x2e\xa3\x0b\xdc\xba\x2c\xa1\x60\x83\x17\x53\x47\x36\xcf\x0e\xae\x45\x25\x15\x3c\x09\x84\xe3\xcb\x5a\x08\x63\x81\xdb\x2b\xe6\x62\x23\x55\x0e\xe1\x08\xe3\xff\x4d\xe4\x25\x93\xb4\x4c\x0d\xc6\x6a\x2a\x5e\x35\x33\xdc\xac\x60\xfe\xcc\x22\x24\x8b\xcb\x36\x47\x03\xc5\xc6\x5b\xa6\x86\xa6\x9a\x92\x7b\x6a\x12\xb6\x8b\x00\x9e\x25\x04\x78\xbe\x18\xa0\xfd\x8a\x39\xba\x9d\xd1\xb9\x8a\x99\xb4\xe5\x2d\x4d\x69\x88\x9e\x68\xdb\xce\xa3\x9d\x10\x5e\xd6\x0d\xe1\x47\x3b\xe2\x8b\xb7\x9b\x6a\xc1\x6d\xdb\xee\x85\x9a\x8a\xe4\xaf\x9c\x36\xa5\x54\xe3\x7b\x9e\x4f\x37\x6d\x2d\x93\xa7\xd1\xaf\xd6\xcf\xff\xab\xe7\xbe\xc5\xa1\x16\x73\x84\x2d\x8b\x23\x50\x2d\x1b\x04\x03\x37\x22\xc9\xe1\xd7\xe1\xb3\x5d\xed\xff\x09\x00\x00\xff\xff\x01\xfa\xa8\x37\xd9\x10\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 4313, mode: os.FileMode(438), modTime: time.Unix(1595953356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css":  indexCss,
	"index.html": indexHtml,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.css":  &bintree{indexCss, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
